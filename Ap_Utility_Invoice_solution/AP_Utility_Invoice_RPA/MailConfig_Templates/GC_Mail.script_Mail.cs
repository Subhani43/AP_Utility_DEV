using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using System.Xml;
using System.Net;
using  System.Net.Mail;
using System.Collections.Generic;

namespace Dynamic.Script_8DA8D1224B6682A
{
	// Script generated by Pega Robot Studio 19.1.112.0
	// Please use caution when modifying class name, namespace or attributes
	[OpenSpan.TypeManagement.DynamicTypeAttribute()]
	[OpenSpan.Design.ComponentIdentityAttribute("Script-8DA8D1224B6682A")]
	public sealed class Script
	{
	public  string EmailContent(string htmlString,string Apendix,string EmailFrom, string EmailTo,string Username,string Password,string Host,int intPort,string strSupplierName,
	string strAccountNumber,string Total, string success,string Skipped, string Fail,string ApInvEmail,string SupportMailID,string PDFMailID, IList<string> attachments)
	{
		 try {  

		// string multiTo = "sshaik5@evoketechnologies.com;sridevi.kakolu@bwpipelines.com";
        MailMessage message = new MailMessage();  
        SmtpClient smtp = new SmtpClient();  
		 message.From = new MailAddress(EmailFrom); 
		smtp.Port = intPort;  
        smtp.Host = Host; 
        smtp.EnableSsl = false;  
        smtp.UseDefaultCredentials = false;  
        smtp.Credentials = new NetworkCredential(Username,Password );  
        smtp.DeliveryMethod = SmtpDeliveryMethod.Network; 
      //  message.From = "svc-PegaBotMail-DEV@bwpipelines.com"; 
      //  message.To = "sshaik5@evoketechnologies.com";
	     message.Subject = "PegaBot logfile for " + strSupplierName;

	  if(Apendix == "A")
	  {
	
ApInvEmail.Split(';').ToList().ForEach(address => message.To.Add(new MailAddress(address)));
	  //  message.To.Add(new MailAddress(EmailTo));
         
        message.IsBodyHtml = true; //to make message body as html  
        message.Body = strSupplierName + "-0 Accounts processed – Fail – Secret Server Name does not exist. Please verify the Supplier and Secret Server Name in Secret Server application.";
        
		}

	 if(Apendix == "B")
	  {
	   // message.To.Add(new MailAddress(EmailTo));
			
ApInvEmail.Split(';').ToList().ForEach(address => message.To.Add(new MailAddress(address)));
         
        message.IsBodyHtml = true; //to make message body as html  
        message.Body = strSupplierName + "- 0 Accounts processed – Fail – UserId or Password incorrect/invalid. Please verify the Supplier's password in Secret Server application and update accordingly.";  
        
		}

		 if(Apendix == "C")
	  {
	    message.To.Add(new MailAddress(ApInvEmail));
		
         
        message.IsBodyHtml = true; //to make message body as html  
        message.Body = strSupplierName + "– 0 Accounts processed – Fail – Bot failed to connect to server. Please contact IT Support.";  
        
		}

		 if(Apendix == "D")
	  {
	    message.To.Add(new MailAddress(EmailTo));
         
        message.IsBodyHtml = true; //to make message body as html  
        message.Body = strSupplierName +  "– 0 Accounts processed – Fail – Bot failed to connect to Secret Server Application. Please contact IT Support Team.";  
        
		}

		 if(Apendix == "E")
	  {
	    message.To.Add(new MailAddress(EmailTo));
         
        message.IsBodyHtml = true; //to make message body as html  
        message.Body = strSupplierName + "– 0 Accounts processed – Fail – Supplier's website down/inaccessible. Please wait for the next run or manually trigger the Bot.";  
        
		}

		 if(Apendix == "F")
	  {
	    message.To.Add(new MailAddress(EmailTo));
         
        message.IsBodyHtml = true; //to make message body as html  
        message.Body = strSupplierName +   "– Account Number" +  strAccountNumber + "– Fail – Supplier Account’s website is slow or unresponsive. Please wait for the next run or manually trigger the Bot.";  
        
		}
		 if(Apendix == "G")
	  {
	    message.To.Add(new MailAddress(EmailTo));
         
        message.IsBodyHtml = true; //to make message body as html  
        message.Body = strSupplierName + "-Account Number" +  strAccountNumber + "– Fail – Bot failed due to unexpected pop-up. Please try to clear the pop-up by manually logging into the supplier website and then wait for the next scheduled run.?If issue continue to persist, contact IT Support Team.";  
        
		}
		 if(Apendix == "H")
	  {
	    message.To.Add(new MailAddress(EmailTo));
         
        message.IsBodyHtml = true; //to make message body as html  
        message.Body = strSupplierName +  "– Account Number" + strAccountNumber + " – Fail – Unable to save PDF Invoice in network folder. Please contact IT Support Team.";  
        
		}
		 if(Apendix == "I")
	  {
	    message.To.Add(new MailAddress(EmailTo));
         
        message.IsBodyHtml = true; //to make message body as html  
        message.Body = strSupplierName  + Total + "Accounts processed -" + success + " Success –" + Skipped + "Skipped –" + Fail + " Fail ";  
        
		}
		 if(Apendix == "J")
	  {
	    message.To.Add(new MailAddress(EmailTo));
         
        message.IsBodyHtml = true; //to make message body as html  
        message.Body = strSupplierName +  Total + "Accounts processed -" + success + " Success –" + Skipped + "Skipped –" + Fail + " Fail ";    
        
		}
		 if(Apendix == "K")
	  {
	    message.To.Add(new MailAddress(EmailTo));
         
        message.IsBodyHtml = true; //to make message body as html  
        message.Body = "Please see attached PDF invoices(s). ";  
		 Attachment Attachment = null;
		 

		 foreach (string attachment in attachments)
            {
                Attachment = new Attachment(attachment);
                message.Attachments.Add(Attachment);
            }
        
		}
		
        smtp.Send(message); 
		
		return "Success" ;
    }
	 catch (Exception ex) {
	 
	 throw ex; 
	 }  


	}
}
}